<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat with GPT/Gemini - Inbox-Infotech</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet" />
    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --secondary-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            --success-gradient: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            --dark-bg: #1a1d29;
            --card-bg: #ffffff;
            --text-primary: #2d3748;
            --text-secondary: #718096;
            --border-color: #e2e8f0;
            --shadow-lg: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
            --shadow-xl: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px 0;
        }

        .main-container {
            max-width: 900px;
            margin: 0 auto;
            padding: 0 20px;
        }

        .chat-card {
            background: var(--card-bg);
            border-radius: 24px;
            box-shadow: var(--shadow-xl);
            border: none;
            overflow: hidden;
            backdrop-filter: blur(20px);
            animation: slideUp 0.6s ease-out;
        }

        

        .chat-header {
            background: var(--primary-gradient);
            color: white;
            padding: 25px 30px;
            border: none;
            position: relative;
            overflow: hidden;
        }

            .chat-header::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="75" cy="75" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="50" cy="10" r="0.5" fill="rgba(255,255,255,0.05)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
                opacity: 0.3;
            }

        .chat-title {
            font-size: 1.5rem;
            font-weight: 600;
            margin: 0;
            display: flex;
            align-items: center;
            gap: 12px;
            position: relative;
            z-index: 1;
        }
     

        .chat-body {
            height: 500px;
            overflow-y: auto;
            padding: 0;
            background: linear-gradient(180deg, #f8fafc 0%, #ffffff 100%);
            position: relative;
        }

        .chat-messages {
            padding: 30px;
            min-height: 100%;
            display: flex;
            flex-direction: column;
        }

        .welcome-message {
            text-align: center;
            color: var(--text-secondary);
            padding: 60px 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 15px;
        }

        .welcome-icon {
            font-size: 3rem;
            background: var(--primary-gradient);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .message-container {
            display: flex;
            margin-bottom: 20px;
            animation: messageSlide 0.3s ease-out;
        }


        .message-container.user {
            justify-content: flex-end;
        }

        .message-bubble {
            max-width: 75%;
            padding: 16px 20px;
            border-radius: 20px;
            font-size: 0.95rem;
            line-height: 1.5;
            position: relative;
            word-wrap: break-word;
        }

            .message-bubble.user {
                background: var(--primary-gradient);
                color: white;
                border-bottom-right-radius: 8px;
                box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
            }

            .message-bubble.bot {
                background: white;
                color: var(--text-primary);
                border: 1px solid var(--border-color);
                border-bottom-left-radius: 8px;
                box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
            }

        .message-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.1rem;
            margin: 0 12px;
            flex-shrink: 0;
        }

            .message-avatar.user {
                background: var(--secondary-gradient);
                color: white;
                order: 2;
            }

            .message-avatar.bot {
                background: var(--success-gradient);
                color: white;
            }

        .bot-label {
            font-weight: 600;
            font-size: 0.85rem;
            margin-bottom: 6px;
            display: block;
        }

        .chat-footer {
            background: white;
            border-top: 1px solid var(--border-color);
            padding: 25px 30px;
        }

        .input-container {
            position: relative;
            display: flex;
            gap: 12px;
            align-items: center;
        }

        .message-input {
            flex: 1;
            border: 2px solid var(--border-color);
            border-radius: 25px;
            padding: 15px 25px;
            font-size: 0.95rem;
            background: #f8fafc;
            transition: all 0.3s ease;
            outline: none;
        }

            .message-input:focus {
                border-color: #667eea;
                background: white;
                box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            }

        .send-button {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background: var(--primary-gradient);
            border: none;
            color: white;
            font-size: 1.1rem;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
        }

            .send-button:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 16px rgba(102, 126, 234, 0.4);
            }

            .send-button:active {
                transform: translateY(0);
            }

        .typing-indicator {
            display: none;
            padding: 15px 20px;
            margin-bottom: 15px;
        }

        .typing-dots {
            display: flex;
            gap: 4px;
        }

        .typing-dot {
            width: 8px;
            height: 8px;
            background: var(--text-secondary);
            border-radius: 50%;
            animation: typingBounce 1.4s infinite ease-in-out;
        }

            .typing-dot:nth-child(1) {
                animation-delay: -0.32s;
            }

            .typing-dot:nth-child(2) {
                animation-delay: -0.16s;
            }

       

        .error-message {
            background: linear-gradient(135deg, #fee2e2 0%, #fecaca 100%);
            color: #dc2626;
            border-left: 4px solid #ef4444;
        }

        /* Scrollbar Styling */
        .chat-body::-webkit-scrollbar {
            width: 6px;
        }

        .chat-body::-webkit-scrollbar-track {
            background: #f1f5f9;
        }

        .chat-body::-webkit-scrollbar-thumb {
            background: linear-gradient(135deg, #cbd5e1, #94a3b8);
            border-radius: 3px;
        }

            .chat-body::-webkit-scrollbar-thumb:hover {
                background: linear-gradient(135deg, #94a3b8, #64748b);
            }

        

        .chat-card {
            border-radius: 16px;
            margin: 10px 0;
        }

        .chat-header {
            padding: 20px;
        }

        .chat-title {
            font-size: 1.3rem;
        }

        .status-indicator {
            position: static;
            margin-top: 10px;
            align-self: flex-start;
        }

        .chat-body {
            height: 400px;
        }

        .chat-messages {
            padding: 20px;
        }

        .message-bubble {
            max-width: 85%;
        }

        .chat-footer {
            padding: 20px;
        }

        }
    </style>
</head>
<body>
    <div class="main-container">
        <div class="card chat-card">
            <div class="card-header chat-header">
                <div class="chat-title">
                    <i class="fas fa-robot"></i>
                    Chat with Inbox-Infotech
                </div>
               
               
            </div>

            <div class="card-body chat-body" id="chatLog">
                <div class="chat-messages">
                    <div class="welcome-message">
                        <i class="fas fa-comments welcome-icon"></i>
                        <h5>Welcome to Inbox-Infotech Chat</h5>
                        <p>Start a conversation with our intelligent AI assistants. Ask anything!</p>
                    </div>
                </div>
            </div>

            <div class="typing-indicator" id="typingIndicator">
                <div class="message-container">
                    <div class="message-avatar bot">
                        <i class="fas fa-robot"></i>
                    </div>
                    <div class="message-bubble bot">
                        <div class="typing-dots">
                            <div class="typing-dot"></div>
                            <div class="typing-dot"></div>
                            <div class="typing-dot"></div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card-footer chat-footer">
                <div class="input-container">
                    <input id="userInput"
                           type="text"
                           class="form-control message-input"
                           placeholder="Type your message here..."
                           maxlength="500" />
                    <button class="send-button" onclick="sendMessage()" id="sendBtn">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        const chatLog = document.getElementById("chatLog");
        const chatMessages = chatLog.querySelector('.chat-messages');
        const typingIndicator = document.getElementById("typingIndicator");
        const sendBtn = document.getElementById("sendBtn");
        const userInput = document.getElementById("userInput");

        // Remove welcome message on first interaction
        let isFirstMessage = true;

        function appendMessage(role, text, model = null) {
            if (isFirstMessage) {
                chatMessages.innerHTML = '';
                isFirstMessage = false;
            }

            const messageContainer = document.createElement("div");
            messageContainer.className = `message-container ${role}`;

            const isError = text.includes("❌ Error");
            const bubbleClass = isError ? `message-bubble ${role} error-message` : `message-bubble ${role}`;

            if (role === 'user') {
                messageContainer.innerHTML = `
                    <div class="message-bubble user">
                        ${escapeHtml(text)}
                    </div>
                    <div class="message-avatar user">
                        <i class="fas fa-user"></i>
                    </div>
                `;
            } else {
                const modelLabel = model === "gemini" ? "Gemini" : "GPT";
                const modelIcon = model === "gemini" ? "fas fa-gem" : "fas fa-brain";

                messageContainer.innerHTML = `
                    <div class="message-avatar bot">
                        <i class="${modelIcon}"></i>
                    </div>
                    <div class="${bubbleClass}">
                        <span class="bot-label">${modelLabel} AI</span>
                        ${text}
                    </div>
                `;
            }

            chatMessages.appendChild(messageContainer);
            chatLog.scrollTop = chatLog.scrollHeight;
        }

        function showTypingIndicator() {
            typingIndicator.style.display = 'block';
            chatLog.scrollTop = chatLog.scrollHeight;
        }

        function hideTypingIndicator() {
            typingIndicator.style.display = 'none';
        }

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        function setLoading(loading) {
            sendBtn.disabled = loading;
            userInput.disabled = loading;

            if (loading) {
                sendBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
                showTypingIndicator();
            } else {
                sendBtn.innerHTML = '<i class="fas fa-paper-plane"></i>';
                hideTypingIndicator();
            }
        }

        function sendMessage() {
            const message = userInput.value.trim();
            if (!message || sendBtn.disabled) return;

            appendMessage('user', message);
            userInput.value = "";
            setLoading(true);

            fetch('/Chat/SendMessage', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ UserMessage: message })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                setLoading(false);
                appendMessage('bot', data.response, data.model);
            })
            .catch(error => {
                setLoading(false);
                console.error('Error:', error);
                appendMessage('bot', "❌ Sorry, I couldn't process your request. Please try again later.");
            });
        }

        // Enhanced enter key support
        userInput.addEventListener("keydown", function (e) {
            if (e.key === "Enter" && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });

        // Auto-resize input and character counter
        userInput.addEventListener('input', function() {
            const remaining = 500 - this.value.length;
            // You can add a character counter here if needed
        });

        // Focus input on page load
        window.addEventListener('load', function() {
            userInput.focus();
        });
                // Track tab switches
        let tabSwitchCount = 0;

        document.addEventListener("visibilitychange", function () {
            if (document.hidden) {
                tabSwitchCount++;
                sendTabSwitchCount(tabSwitchCount);
            }
        });

        function sendTabSwitchCount(count) {
            fetch('/Chat/UpdateTabSwitchCount', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ count: count })
            }).catch(err => console.error("Tab switch update failed:", err));
        }

    </script>
</body>
</html>