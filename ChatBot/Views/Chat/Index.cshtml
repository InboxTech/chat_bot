@{
    ViewData["Title"] = "Chat";
}

@section Styles {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet" />
    <link href="~/css/site.css" rel="stylesheet" />

    <style>
        :root {
            --primary-color: #667eea;
            --primary-dark: #5a67d8;
            --secondary-color: #f093fb;
            --accent-color: #4facfe;
            --success-color: #48bb78;
            --warning-color: #ed8936;
            --danger-color: #f56565;
            --dark-color: #2d3748;
            --light-color: #f7fafc;
            --white: #ffffff;
            --gray-50: #f9fafb;
            --gray-100: #f3f4f6;
            --gray-200: #e5e7eb;
            --gray-300: #d1d5db;
            --gray-400: #9ca3af;
            --gray-500: #6b7280;
            --gray-600: #4b5563;
            --gray-700: #374151;
            --gray-800: #1f2937;
            --gray-900: #111827;
            --gradient-bg: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --message-gradient: linear-gradient(135deg, #667eea 0%, #f093fb 100%);
            --bot-gradient: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            --card-gradient: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%);
            --border-radius: 16px;
            --border-radius-lg: 24px;
            --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
            --shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px -1px rgba(0, 0, 0, 0.1);
            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);
            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -4px rgba(0, 0, 0, 0.1);
            --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 8px 10px -6px rgba(0, 0, 0, 0.1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: var(--gradient-bg);
            min-height: 100vh;
            overflow: hidden;
        }

        .chat-container {
            height: 100vh;
            display: flex;
            flex-direction: column;
            max-width: 100%;
            margin: 0 auto;
            background: var(--white);
            position: relative;
            animation: slideIn 0.5s ease-out;
        }

        .webcam-container {
            display: none;
            position: absolute;
            top: 10px;
            right: 10px;
            width: 320px;
            max-width: 100%;
            background: var(--gray-900);
            border-radius: var(--border-radius);
            box-shadow: var(--shadow-lg);
            padding: 10px;
            z-index: 1000;
        }

            .webcam-container.active {
                display: block;
            }

        .webcam-video {
            width: 100%;
            border-radius: var(--border-radius);
            background: black;
        }

        .webcam-controls {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-top: 10px;
        }

        .webcam-btn {
            background: var(--primary-color);
            color: var(--white);
            border: none;
            padding: 8px 16px;
            border-radius: var(--border-radius);
            cursor: pointer;
            font-size: 14px;
            transition: background 0.3s;
        }

            .webcam-btn:hover {
                background: var(--primary-dark);
            }

            .webcam-btn:disabled {
                background: var(--gray-400);
                cursor: not-allowed;
            }
    </style>
}

<div class="chat-container">
    <!-- Webcam Container -->
    <div class="webcam-container" id="webcamContainer">
        <video class="webcam-video" id="webcamVideo" autoplay muted></video>
        <div class="webcam-controls">
            <button class="webcam-btn" id="stopWebcamButton" onclick="stopWebcam()" disabled>Stop Webcam</button>
        </div>
    </div>

    <!-- Header -->
    <div class="chat-header">
        <div class="header-left">
            <div class="header-avatar">
                <i class="fas fa-robot"></i>
            </div>
            <div class="header-info">
                <h1>Inbox-Infotech AI</h1>
                <p>Your intelligent company assistant</p>
            </div>
        </div>
    </div>

    <!-- Quick Actions -->
    <div class="quick-actions">
        <button class="quick-btn" onclick="sendQuickMessage('How can I contact to this company?')">
            <i class="fas fa-phone"></i>
            <span>Contact</span>
        </button>
        <button class="quick-btn" onclick="sendQuickMessage('Tell me about this company.')">
            <i class="fas fa-info-circle"></i>
            <span>About</span>
        </button>
        <button class="quick-btn" onclick="sendQuickMessage('Which industries does this company serve?')">
            <i class="fas fa-industry"></i>
            <span>Industries</span>
        </button>
        <button class="quick-btn" onclick="sendQuickMessage('What services does this company provide?')">
            <i class="fas fa-cogs"></i>
            <span>Services</span>
        </button>
        <button class="quick-btn" onclick="sendQuickMessage('What products does this company offer?')">
            <i class="fas fa-box"></i>
            <span>Products</span>
        </button>
        <button class="quick-btn" onclick="sendQuickMessage('I want to apply for a job in this company.')">
            <i class="fas fa-briefcase"></i>
            <span>Jobs</span>
        </button>
    </div>

    <!-- Messages Area -->
    <div class="messages-container" id="messagesContainer">
        <div class="messages-list" id="messagesList">
            <div class="welcome-screen" id="welcomeScreen">
                <div class="welcome-icon">
                    <i class="fas fa-robot"></i>
                </div>
                <h2 class="welcome-title">Welcome to Inbox-Infotech AI</h2>
                <p class="welcome-subtitle">I'm here to help you with information about our company, services, products, or job openings. You can also upload your resume to find matching opportunities!</p>
                <div class="welcome-suggestions">
                    <div class="suggestion-card" onclick="sendQuickMessage('Tell me about your products')">
                        <div class="suggestion-icon"><i class="fas fa-box"></i></div>
                        <div class="suggestion-title">Our Products</div>
                        <div class="suggestion-desc">Discover our innovative product solutions</div>
                    </div>
                    <div class="suggestion-card" onclick="sendQuickMessage('Where are you located?')">
                        <div class="suggestion-icon"><i class="fas fa-map-marker-alt"></i></div>
                        <div class="suggestion-title">Our Location</div>
                        <div class="suggestion-desc">Find our office locations and contact details</div>
                    </div>
                    <div class="suggestion-card" onclick="sendQuickMessage('What job openings do you have?')">
                        <div class="suggestion-icon"><i class="fas fa-briefcase"></i></div>
                        <div class="suggestion-title">Career Opportunities</div>
                        <div class="suggestion-desc">Browse available positions and join our team</div>
                    </div>
                </div>
            </div>

            <div class="typing-indicator" id="typingIndicator">
                <div class="message-avatar">
                    <i class="fas fa-robot"></i>
                </div>
                <div class="typing-bubble">
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Input Area -->
    <div class="chat-input">
        <div class="input-wrapper">
            <textarea class="message-input" id="messageInput" placeholder="Type your message..." rows="1" oninput="autoResize(this)" onkeypress="handleKeyPress(event)"></textarea>
            <div class="input-actions">
                <button class="input-btn voice-btn" id="micButton" title="Start Speech Recognition" onclick="startSpeechRecognition()">
                    <i class="fas fa-microphone"></i>
                </button>
                <button class="upload-btn" onclick="triggerFileInput()">
                    <i class="fas fa-paperclip"></i> Resume
                </button>
                <input type="file" id="fileInput" accept=".pdf,.docx" />
                <button class="input-btn send-btn" id="sendButton" title="Send Message" onclick="sendMessage()">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Only showing the updated Scripts section for brevity -->
@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        // Initialize Speech Recognition
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        let recognition = null;
        let isRecording = false;
        let webcamStream = null;
        let isWebcamActive = false;
        let isInterviewActive = false;
        let mediaRecorder = null; // For recording video
        let recordedChunks = []; // Store video data

        if (SpeechRecognition) {
            recognition = new SpeechRecognition();
            recognition.continuous = false;
            recognition.interimResults = true;
            recognition.lang = 'en-US';

            recognition.onresult = function(event) {
                let interimTranscript = '';
                let finalTranscript = '';

                for (let i = event.resultIndex; i < event.results.length; i++) {
                    const transcript = event.results[i][0].transcript;
                    if (event.results[i].isFinal) {
                        finalTranscript += transcript;
                    } else {
                        interimTranscript += transcript;
                    }
                }

                const messageInput = document.getElementById('messageInput');
                messageInput.value = finalTranscript || interimTranscript;
                autoResize(messageInput);
            };

            recognition.onend = function() {
                isRecording = false;
                const micButton = document.getElementById('micButton');
                micButton.classList.remove('recording');
                micButton.title = 'Start Speech Recognition';
            };

            recognition.onerror = function(event) {
                console.error('Speech recognition error:', event.error);
                isRecording = false;
                const micButton = document.getElementById('micButton');
                micButton.classList.remove('recording');
                micButton.title = 'Start Speech Recognition';
                alert('Speech recognition error: ' + event.error);
            };
        }

        // Webcam handling with recording
        async function startWebcam() {
            if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                alert('Webcam is not supported in this browser.');
                appendWebcamErrorMessage();
                return;
            }

            try {
                webcamStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true }); // Include audio
                const videoElement = document.getElementById('webcamVideo');
                const webcamContainer = document.getElementById('webcamContainer');
                const stopButton = document.getElementById('stopWebcamButton');

                videoElement.srcObject = webcamStream;
                webcamContainer.classList.add('active');
                stopButton.disabled = false;
                isWebcamActive = true;

                // Start recording
                recordedChunks = [];
                mediaRecorder = new MediaRecorder(webcamStream, { mimeType: 'video/webm' });
                mediaRecorder.ondataavailable = function(event) {
                    if (event.data.size > 0) {
                        recordedChunks.push(event.data);
                    }
                };
                mediaRecorder.onstop = function() {
                    const blob = new Blob(recordedChunks, { type: 'video/webm' });
                    const formData = new FormData();
                    formData.append('video', blob, `interview-${Date.now()}.webm`);

                    // Send video to backend
                    $.ajax({
                        url: '/Chat/UploadInterviewVideo',
                        type: 'POST',
                        data: formData,
                        processData: false,
                        contentType: false,
                        success: function(response) {
                            console.log('Video uploaded successfully:', response);
                            appendMessage('bot', `🎥 Video recorded and saved successfully. <a href="/Chat/ViewInterviewVideo?fileName=${response.fileName}" target="_blank">View Video</a>`);
                        },
                        error: function() {
                            console.error('Error uploading video');
                            appendMessage('bot', '❌ Error saving video. Please try again.');
                        }
                    });
                };
                mediaRecorder.start();
            } catch (error) {
                console.error('Error accessing webcam:', error);
                appendWebcamErrorMessage();
                isWebcamActive = false;
            }
        }

        function appendWebcamErrorMessage() {
            appendMessage('bot', '❌ Unable to access webcam. Please grant permission and ensure you have a working webcam to continue the interview.');
        }

        function appendMessage(sender, content) {
            const messagesList = document.getElementById('messagesList');
            const typingIndicator = document.getElementById('typingIndicator');
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${sender}`;
            messageDiv.innerHTML = `
                <div class="message-avatar"><i class="fas fa-${sender === 'bot' ? 'robot' : 'user'}"></i></div>
                <div class="message-content">
                    <div class="message-bubble">${content}</div>
                    <div class="message-time">${new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</div>
                </div>`;
            messagesList.insertBefore(messageDiv, typingIndicator);
            const messagesContainer = document.getElementById('messagesContainer');
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        function stopWebcam() {
            if (webcamStream) {
                if (mediaRecorder && mediaRecorder.state !== 'inactive') {
                    mediaRecorder.stop();
                }
                webcamStream.getTracks().forEach(track => track.stop());
                webcamStream = null;
                const videoElement = document.getElementById('webcamVideo');
                videoElement.srcObject = null;
                const webcamContainer = document.getElementById('webcamContainer');
                webcamContainer.classList.remove('active');
                const stopButton = document.getElementById('stopWebcamButton');
                stopButton.disabled = true;
                isWebcamActive = false;
            }
        }

        // Trigger file input click
        function triggerFileInput() {
            document.getElementById('fileInput').click();
        }

        // Auto-resize textarea
        function autoResize(textarea) {
            textarea.style.height = 'auto';
            textarea.style.height = `${textarea.scrollHeight}px`;
        }

        // Handle Enter key to send message
        function handleKeyPress(event) {
            if (event.key === 'Enter' && !event.shiftKey) {
                event.preventDefault();
                sendMessage();
            }
        }

        // Send quick action message
        function sendQuickMessage(message) {
            document.getElementById('messageInput').value = message;
            sendMessage();
        }

        // Clear chat
        function clearChat() {
            stopWebcam();
            isInterviewActive = false;
            const messagesList = document.getElementById('messagesList');
            messagesList.innerHTML = `
                <div class="welcome-screen" id="welcomeScreen">
                    <div class="welcome-icon">
                        <i class="fas fa-robot"></i>
                    </div>
                    <h2 class="welcome-title">Welcome to Inbox-Infotech AI</h2>
                    <p class="welcome-subtitle">I'm here to help you with information about our company, services, products, or job openings. You can also upload your resume to find matching opportunities!</p>
                    <div class="welcome-suggestions">
                        <div class="suggestion-card" onclick="sendQuickMessage('What services do you offer?')">
                            <div class="suggestion-icon"><i class="fas fa-cogs"></i></div>
                            <div class="suggestion-title">Our Services</div>
                            <div class="suggestion-desc">Explore our comprehensive range of professional services</div>
                        </div>
                        <div class="suggestion-card" onclick="sendQuickMessage('Tell me about your products')">
                            <div class="suggestion-icon"><i class="fas fa-box"></i></div>
                            <div class="suggestion-title">Our Products</div>
                            <div class="suggestion-desc">Discover our innovative product solutions</div>
                        </div>
                        <div class="suggestion-card" onclick="sendQuickMessage('Where are you located?')">
                            <div class="suggestion-icon"><i class="fas fa-map-marker-alt"></i></div>
                            <div class="suggestion-title">Our Location</div>
                            <div class="suggestion-desc">Find our office locations and contact details</div>
                        </div>
                        <div class="suggestion-card" onclick="sendQuickMessage('What job openings do you have?')">
                            <div class="suggestion-icon"><i class="fas fa-briefcase"></i></div>
                            <div class="suggestion-title">Career Opportunities</div>
                            <div class="suggestion-desc">Browse available positions and join our team</div>
                        </div>
                    </div>
                </div>
                <div class="typing-indicator" id="typingIndicator">
                    <div class="message-avatar">
                        <i class="fas fa-robot"></i>
                    </div>
                    <div class="typing-bubble">
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                    </div>
                </div>`;
            document.getElementById('messageInput').value = '';
            autoResize(document.getElementById('messageInput'));
        }

        // Send message to server
        function sendMessage() {
            const input = document.getElementById('messageInput');
            const message = input.value.trim();
            if (!message) return;

            if (isInterviewActive && !isWebcamActive) {
                alert('Please enable your webcam to continue the interview.');
                return;
            }

            const welcomeScreen = document.getElementById('welcomeScreen');
            if (welcomeScreen) {
                welcomeScreen.style.display = 'none';
            }

            appendMessage('user', message);

            const typingIndicator = document.getElementById('typingIndicator');
            typingIndicator.style.display = 'flex';

            input.value = '';
            autoResize(input);

            $.ajax({
                url: '/Chat/SendMessage',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ userMessage: message }),
                success: function(response) {
                    typingIndicator.style.display = 'none';
                    appendMessage('bot', response.response);

                    if (response.startInterview) {
                        isInterviewActive = true;
                        startWebcam();
                    } else if (response.response.includes('interview will not start') || response.response.includes('Thank you for completing the interview')) {
                        isInterviewActive = false;
                        stopWebcam();
                    }
                },
                error: function() {
                    typingIndicator.style.display = 'none';
                    appendMessage('bot', '❌ Sorry, I encountered an error. Please try again.');
                }
            });
        }

        // Handle file upload
        document.getElementById('fileInput').addEventListener('change', function(event) {
            const file = event.target.files[0];
            if (!file) return;

            const validExtensions = ['.pdf', '.docx'];
            const maxSize = 5 * 1024 * 1024; // 5MB
            const extension = file.name.substring(file.name.lastIndexOf('.')).toLowerCase();

            if (!validExtensions.includes(extension)) {
                alert('Please upload a PDF or Word (.docx) file.');
                event.target.value = '';
                return;
            }

            if (file.size > maxSize) {
                alert('File size exceeds 5MB. Please upload a smaller file.');
                event.target.value = '';
                return;
            }

            const welcomeScreen = document.getElementById('welcomeScreen');
            if (welcomeScreen) {
                welcomeScreen.style.display = 'none';
            }

            appendMessage('user', `📄 Uploaded resume: ${file.name}`);

            const typingIndicator = document.getElementById('typingIndicator');
            typingIndicator.style.display = 'flex';

            const formData = new FormData();
            formData.append('resume', file);
            $.ajax({
                url: '/Chat/UploadResume',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    typingIndicator.style.display = 'none';
                    appendMessage('bot', response.response);
                    event.target.value = '';
                },
                error: function() {
                    typingIndicator.style.display = 'none';
                    appendMessage('bot', '❌ Error uploading resume. Please try again.');
                    event.target.value = '';
                }
            });
        });

        // Track tab switches
        let tabSwitchCount = 0;
        document.addEventListener('visibilitychange', function() {
            if (document.hidden) {
                tabSwitchCount++;
                $.ajax({
                    url: '/Chat/UpdateTabSwitchCount',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ count: tabSwitchCount }),
                    error: function() {
                        console.error('Error updating tab switch count');
                    }
                });
            }
        });

        // Stop webcam when page is unloaded
        window.addEventListener('beforeunload', function() {
            stopWebcam();
        });
    </script>
}